// <auto-generated />
using System;
using Events.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Events.API.Migrations
{
    [DbContext(typeof(EventsDBContext))]
    [Migration("20220106073554_M1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Events.API.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11ce940f-0997-463a-b850-6d5a866a07a7"),
                            Description = "Raj's birthday celebration description. Raj's birthday celebration description. Raj's birthday celebration description.",
                            EndDateTime = new DateTime(2022, 1, 13, 1, 35, 54, 68, DateTimeKind.Local).AddTicks(2406),
                            EventType = "Indoor",
                            StartDateTime = new DateTime(2022, 1, 12, 23, 35, 54, 68, DateTimeKind.Local).AddTicks(1914),
                            Title = "Raj's birthday belebration"
                        },
                        new
                        {
                            Id = new Guid("21ce940f-0997-463a-b850-6d5a866a07a7"),
                            Description = "David's marriage anniversary celebration. David's marriage anniversary celebration. David's marriage anniversary celebration.",
                            EndDateTime = new DateTime(2022, 1, 23, 3, 35, 54, 68, DateTimeKind.Local).AddTicks(2973),
                            EventType = "Outdoor",
                            StartDateTime = new DateTime(2022, 1, 22, 23, 35, 54, 68, DateTimeKind.Local).AddTicks(2946),
                            Title = "David's marriage anniversary celebration"
                        },
                        new
                        {
                            Id = new Guid("31ce940f-0997-463a-b850-6d5a866a07a7"),
                            Description = "Georg's work anniversary celebration. Georg's work anniversary celebration. Georg's work anniversary celebration.",
                            EndDateTime = new DateTime(2022, 1, 16, 2, 35, 54, 68, DateTimeKind.Local).AddTicks(3000),
                            EventType = "Indoor",
                            StartDateTime = new DateTime(2022, 1, 15, 23, 35, 54, 68, DateTimeKind.Local).AddTicks(2996),
                            Title = "Georg's work anniversary celebration"
                        });
                });

            modelBuilder.Entity("Events.API.Entities.Person", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Email");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Email = "RajRurhi@events.com",
                            DateOfBirth = new DateTime(1987, 1, 5, 23, 35, 54, 58, DateTimeKind.Local).AddTicks(5388),
                            FirstName = "Raj",
                            LastName = "Rurhi"
                        },
                        new
                        {
                            Email = "DavidJones@events.com",
                            DateOfBirth = new DateTime(1972, 1, 5, 23, 35, 54, 66, DateTimeKind.Local).AddTicks(3249),
                            FirstName = "David",
                            LastName = "Jones"
                        },
                        new
                        {
                            Email = "GeorgeJensen@events.com",
                            DateOfBirth = new DateTime(1922, 1, 5, 23, 35, 54, 66, DateTimeKind.Local).AddTicks(3323),
                            FirstName = "Georg",
                            LastName = "Jensen"
                        },
                        new
                        {
                            Email = "AmitKumar@events.com",
                            DateOfBirth = new DateTime(1994, 1, 5, 23, 35, 54, 66, DateTimeKind.Local).AddTicks(3332),
                            FirstName = "Amit",
                            LastName = "Kumar"
                        });
                });

            modelBuilder.Entity("Events.API.Entities.PersonEvent", b =>
                {
                    b.Property<string>("PersonEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonEmail", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("PersonEvents");

                    b.HasData(
                        new
                        {
                            PersonEmail = "RajRurhi@events.com",
                            EventId = new Guid("11ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "DavidJones@events.com",
                            EventId = new Guid("11ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "GeorgeJensen@events.com",
                            EventId = new Guid("11ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "DavidJones@events.com",
                            EventId = new Guid("21ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "GeorgeJensen@events.com",
                            EventId = new Guid("21ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "AmitKumar@events.com",
                            EventId = new Guid("21ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "GeorgeJensen@events.com",
                            EventId = new Guid("31ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "AmitKumar@events.com",
                            EventId = new Guid("31ce940f-0997-463a-b850-6d5a866a07a7")
                        },
                        new
                        {
                            PersonEmail = "RajRurhi@events.com",
                            EventId = new Guid("31ce940f-0997-463a-b850-6d5a866a07a7")
                        });
                });

            modelBuilder.Entity("Events.API.Entities.PersonEvent", b =>
                {
                    b.HasOne("Events.API.Entities.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.API.Entities.Person", "Person")
                        .WithMany("EventsToAttend")
                        .HasForeignKey("PersonEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
